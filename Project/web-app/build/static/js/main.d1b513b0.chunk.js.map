{"version":3,"sources":["components/AuthenticationProtocol.js","components/StandardTextBar.js","components/UserLogin.js","components/App.js","serviceWorker.js","index.js"],"names":["AuthenticationProtocol","selectedListener","ToggleButtonGroup","type","name","onChange","ToggleButton","value","StandardTextBar","placeholder","inputType","className","e","target","required","LoginForm","id","app","action","state","email","password","selectedProtocol","method","changeEmail","changePass","UserLogin","src","alt","href","App","changeSelectedProtocol","protocol","setState","inputPass","inputEmail","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAWeA,EAPgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,iBAAF,OAC3B,kBAACC,EAAA,EAAD,CAAmBC,KAAK,QAAQC,KAAK,UAAUC,SAAUJ,GACrD,kBAACK,EAAA,EAAD,CAAcC,MAAO,QAArB,UACA,kBAACD,EAAA,EAAD,CAAcC,MAAO,UAArB,YACA,kBAACD,EAAA,EAAD,CAAcC,MAAO,YAArB,gBCND,SAASC,EAAT,GAAgE,IAArCH,EAAoC,EAApCA,SAAUI,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,UACrD,OACI,yBAAKC,UAAU,cACX,2BAAOR,KAAMO,EAAWC,UAAU,eAAeF,YAAaA,EAAaJ,SAAU,SAAAO,GAAC,OAAEP,EAASO,EAAEC,OAAON,QAAQO,UAAQ,KAKvH,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,GAAKC,EAAM,EAANA,IAIpC,OACI,yBAAKN,UAAU,oBAAoBK,GAAIA,GACnC,0BAAME,OAJD,uBAAqBD,EAAIE,MAAMC,MAA/B,iBAA6CH,EAAIE,MAAME,SAAvD,iBAAwEJ,EAAIE,MAAMG,kBAI9DC,OAAO,QAC5B,kBAACf,EAAD,CAAiBH,SAAUY,EAAIO,YAAaf,YAAa,cAAgBC,UAAW,UACpF,kBAACF,EAAD,CAAiBH,SAAUY,EAAIQ,WAAYhB,YAAa,WAAaC,UAAW,aAChF,4BAAQP,KAAK,SAASQ,UAAU,mBAAhC,WChBhB,IAoBee,EApBG,SAAC,GAAD,IAAET,EAAF,EAAEA,IAAF,OACd,yBAAKN,UAAU,4BACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKgB,IAAI,WAAWC,IAAK,MAE7B,yBAAKjB,UAAU,oBACX,2CAEJ,kBAACI,EAAD,CAAWC,GAAI,QAASC,IAAKA,IAC7B,yBAAKN,UAAU,oBACX,uBAAGkB,KAAK,sBAAR,uBACA,6BACA,uBAAGA,KAAK,aAAR,kBCOLC,G,iNAhBXX,MAAQ,CAAEG,iBAAkB,OAAQD,SAAS,GAAID,MAAM,I,EAEvDW,uBAAyB,SAAAC,GAAc,EAAKC,SAAS,CAACX,iBAAkBU,K,EACxEP,WAAa,SAAAS,GAAe,EAAKD,SAAS,CAACZ,SAAUa,K,EACrDV,YAAc,SAAAW,GAAgB,EAAKF,SAAS,CAACb,MAAOe,K,wEAGhD,OACI,yBAAKxB,UAAU,OACX,kBAAC,EAAD,CAAwBV,iBAAkBmC,KAAKL,yBAC/C,kBAAC,EAAD,CAAWd,IAAKmB,Y,GAXdC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d1b513b0.chunk.js","sourcesContent":["import React from 'react'\r\nimport ToggleButton from 'react-bootstrap/ToggleButton'\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\r\n\r\nconst AuthenticationProtocol = ({selectedListener})=>\r\n    <ToggleButtonGroup type=\"radio\" name=\"options\" onChange={selectedListener}>\r\n        <ToggleButton value={\"SAML\"}> SAML </ToggleButton>\r\n        <ToggleButton value={\"OpenId\"}> OpenId </ToggleButton>\r\n        <ToggleButton value={\"Kerberos\"}> Kerberos </ToggleButton>\r\n    </ToggleButtonGroup>\r\n\r\nexport default AuthenticationProtocol\r\n    \r\n\r\n   ","import React from 'react'\r\n\r\nexport function StandardTextBar({ onChange, placeholder, inputType }) {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <input type={inputType} className=\"form-control\" placeholder={placeholder} onChange={e=>onChange(e.target.value)} required></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function LoginForm({id , app}) {\r\n\r\n    let getLink= ()=> `/login email=${app.state.email}&pass=${app.state.password}&auth=${app.state.selectedProtocol}`\r\n\r\n    return (\r\n        <div className=\"col-12 form-input\" id={id}>\r\n            <form action={getLink()} method=\"POST\">\r\n                <StandardTextBar onChange={app.changeEmail} placeholder={\"Enter email\"}  inputType={\"email\"}/>\r\n                <StandardTextBar onChange={app.changePass} placeholder={\"Password\"}  inputType={\"password\"}/>\r\n                <button type=\"submit\" className=\"btn btn-success\" >Login</button>\r\n            </form>\r\n       </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport LoginForm from \"./StandardTextBar\";\r\n\r\nconst UserLogin = ({app})=>\r\n    <div className=\"modal-dialog text-center\">\r\n        <div className=\"col-sm-8 main-section\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"col-12 user-img\">\r\n                    <img src=\"logo.png\" alt={\"\"}/>\r\n                </div>\r\n                <div className=\"col-12 user-name\">\r\n                    <h1>User Login</h1>\r\n                </div>\r\n                <LoginForm id={\"login\"} app={app}/>\r\n                <div className=\"col-12 link-part\">\r\n                    <a href=\"/passwordForgotten\">Forgot Password?   </a>\r\n                    <h1></h1>\r\n                    <a href=\"/register\"> Register</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nexport default UserLogin\r\n","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport AuthenticationProtocol from './AuthenticationProtocol'\r\nimport UserLogin from './UserLogin'\r\n\r\nimport './stylesheets/App.css';\r\n\r\nclass App extends Component {\r\n    state = { selectedProtocol: \"none\", password:\"\", email:\"\"};\r\n\r\n    changeSelectedProtocol = protocol => { this.setState({selectedProtocol: protocol})}\r\n    changePass = inputPass => { this.setState({password: inputPass})}\r\n    changeEmail = inputEmail => { this.setState({email: inputEmail})}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <AuthenticationProtocol selectedListener={this.changeSelectedProtocol}/>\r\n                <UserLogin app={this}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}