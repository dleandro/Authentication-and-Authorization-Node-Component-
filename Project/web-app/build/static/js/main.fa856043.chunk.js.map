{"version":3,"sources":["components/AuthenticationProtocol.js","components/StandardTextBar.js","components/UserLogin.js","App.js","serviceWorker.js","index.js"],"names":["AuthenticationProtocol","state","selectedProtocol","changeSelectedProtocol","protocol","setState","ToggleButtonGroup","type","name","onChange","this","ToggleButton","value","Component","StandardTextBar","Id","placeholder","inputType","className","id","required","LoginForm","action","method","UserLogin","src","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSA2BmBA,E,2MArBfC,MAAQ,CACJC,iBAAkB,I,EAGtBC,uBAAyB,SAAAC,GACrB,EAAKC,SAAS,CAACH,iBAAkBE,K,wEAIjC,OAEI,kBAACE,EAAA,EAAD,CAAmBC,KAAK,QAAQC,KAAK,UAAUC,SAAUC,KAAKP,wBAC1D,kBAACQ,EAAA,EAAD,CAAcC,MAAO,QAArB,UACA,kBAACD,EAAA,EAAD,CAAcC,MAAO,UAArB,YACA,kBAACD,EAAA,EAAD,CAAcC,MAAO,YAArB,mB,GAhBqBC,aCD9B,SAASC,EAAT,GAA0D,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,UAC/C,OACI,yBAAKC,UAAU,cACX,2BAAOX,KAAMU,EAAWC,UAAU,eAAeF,YAAaA,EAAaG,GAAIJ,EAAIK,UAAQ,KAKxF,SAASC,EAAT,GAA4B,IAAPF,EAAM,EAANA,GAChC,OAKG,yBAAKD,UAAU,oBAAoBC,GAAIA,GAClC,0BAAMG,OAAO,SAASC,OAAO,QACzB,kBAACT,EAAD,CAAiBC,GAAI,QAASC,YAAa,cAAeC,UAAW,UACrE,kBAACH,EAAD,CAAiBC,GAAI,WAAYC,YAAa,WAAYC,UAAW,aACrE,4BAAQV,KAAK,SAASW,UAAU,mBAAhC,YChBT,IA6BQM,EA7Bf,iLAEQ,OAKI,yBAAKN,UAAU,4BACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKO,IAAI,cAEb,yBAAKP,UAAU,oBACX,2CAEJ,kBAACG,EAAD,CAAWF,GAAI,UACf,yBAAKD,UAAU,oBACX,uBAAGQ,KAAK,KAAR,uBACA,6BACA,uBAAGA,KAAK,aAAR,qBApB5B,GAA+Bb,aCehBc,G,uLAVX,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUL,cCKEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa856043.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup'\n\nclass AuthenticationProtocol extends Component {\n\n    state = {\n        selectedProtocol: \"\"    \n    }\n\n    changeSelectedProtocol = protocol => {\n        this.setState({selectedProtocol: protocol})\n    }\n\n    render() {\n        return (\n\n            <ToggleButtonGroup type=\"radio\" name=\"options\" onChange={this.changeSelectedProtocol}>\n                <ToggleButton value={\"SAML\"}> SAML </ToggleButton>\n                <ToggleButton value={\"OpenId\"}> OpenId </ToggleButton>\n                <ToggleButton value={\"Kerberos\"}> Kerberos </ToggleButton>\n            </ToggleButtonGroup>\n        )\n\n    }\n    }\n    \n    export default AuthenticationProtocol\n    \n\n   ","import React from 'react'\nimport Form from \"react-bootstrap/Form\";\n\nexport function StandardTextBar({ Id, placeholder, inputType }) {\n    return (\n        <div className=\"form-group\">\n            <input type={inputType} className=\"form-control\" placeholder={placeholder} id={Id} required></input>\n        </div>\n    )\n}\n\nexport default function LoginForm({ id }) {\n    return (\n       /*<Form.Group controlId={formId}>\n            <Form.Label>{label}</Form.Label>\n            <Form.Control type={inputType} placeholder={placeholder} />\n        </Form.Group>*/\n       <div className=\"col-12 form-input\" id={id}>\n            <form action=\"/login\" method=\"POST\">\n                <StandardTextBar Id={\"email\"} placeholder={\"Enter email\"} inputType={\"email\"}/>\n                <StandardTextBar Id={\"password\"} placeholder={\"Password\"} inputType={\"password\"}/>\n                <button type=\"submit\" className=\"btn btn-success\">Login</button>\n            </form>\n       </div>\n    )\n}\n\n","import React, { Component } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport LoginForm from \"./StandardTextBar\";\n\n\nexport class UserLogin extends Component {\n    render() {\n        return (\n            /*<Form>\n                <StandardTextBar formId={\"formGroupEmail\"} label={\"Email address\"} placeholder={\"Enter email\"} inputType={\"email\"} />\n                <StandardTextBar formId={\"formGroupPassword\"} label={\"Password\"} placeholder={\"Password\"} inputType={\"password\"} />\n            </Form>*/\n            <div className=\"modal-dialog text-center\">\n                <div className=\"col-sm-8 main-section\">\n                    <div className=\"modal-content\">\n                        <div className=\"col-12 user-img\">\n                            <img src=\"logo.png\"/>\n                        </div>\n                        <div className=\"col-12 user-name\">\n                            <h1>User Login</h1>\n                        </div>\n                        <LoginForm id={\"login\"}/>\n                        <div className=\"col-12 link-part\">\n                            <a href=\"#\">Forgot Password?   </a>\n                            <h1></h1>\n                            <a href=\"/register\"> Register</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UserLogin\n","import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport AuthenticationProtocol from './components/AuthenticationProtocol'\nimport UserLogin from './components/UserLogin'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <AuthenticationProtocol />\n        <UserLogin/>\n      </div>\n    );\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}