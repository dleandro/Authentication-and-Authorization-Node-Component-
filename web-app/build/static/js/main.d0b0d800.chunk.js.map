{"version":3,"sources":["components/LoginForm.js","components/UserLogin.js","components/App.js","serviceWorker.js","index.js"],"names":["LoginForm","id","app","fetch","require","className","InputGroup","FormControl","placeholder","aria-label","aria-describedby","type","value","state","username","onChange","event","setState","target","password","Button","variant","onClick","selectedProtocol","method","headers","body","JSON","stringify","then","resp","json","console","log","href","UserLogin","src","alt","App","changePass","inputPass","changeUsername","inputUsername","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6TAKe,SAASA,EAAT,GAAgC,IAAZC,EAAW,EAAXA,GAAKC,EAAM,EAANA,IAE9BC,EAAQC,EAAQ,IAiCtB,OACI,yBAAKC,UAAU,oBAAoBJ,GAAIA,GAEnC,kBAACK,EAAA,EAAD,CAAYD,UAAU,QAClB,kBAACE,EAAA,EAAD,CACIC,YAAY,WACZC,aAAW,uBACXC,mBAAiB,eACjBC,KAAK,OACLC,MAAOV,EAAIW,MAAMC,SACjBC,SAfO,SAAAC,GAEnBd,EAAIe,SAAS,CAAEH,SAAUE,EAAME,OAAON,WAe9B,kBAACL,EAAA,EAAD,CACIC,YAAY,WACZC,aAAW,uBACXC,mBAAiB,eACjBC,KAAK,WACLC,MAAOV,EAAIW,MAAMM,SACjBJ,SA7BO,SAAAC,GAEnBd,EAAIe,SAAS,CAAEE,SAAUH,EAAME,OAAON,YAiClC,kBAACQ,EAAA,EAAD,CACIC,QAAQ,UACRC,QA1DZ,WAEInB,EAAM,8BAA+BD,EAAIW,MAAMU,iBAAkB,CAC7DC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBd,SAAUZ,EAAIW,MAAMC,SACpBK,SAAUjB,EAAIW,MAAMM,aAGvBU,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAE,GAAI,OAAEC,QAAQC,IAAIF,QA+CvB,SAGD,uBAAGG,KAAK,sCAAR,wBCpEZ,IAoBeC,EApBG,SAAC,GAAD,IAAEjC,EAAF,EAAEA,IAAF,OACd,yBAAKG,UAAU,4BACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAK+B,IAAI,WAAWC,IAAK,MAE7B,yBAAKhC,UAAU,oBACX,2CAEJ,kBAACL,EAAD,CAAWC,GAAI,QAASC,IAAKA,IAC7B,yBAAKG,UAAU,oBACX,uBAAG6B,KAAK,sBAAR,uBACA,6BACA,uBAAGA,KAAK,aAAR,kBCWLI,G,iNApBXzB,MAAQ,CAAEU,iBAAkB,GAAIJ,SAAS,GAAIL,SAAS,I,EAEtDyB,WAAa,SAAAC,GACT,EAAKvB,SAAS,CAACE,SAAUqB,IACzBR,QAAQC,IAAI,a,EAEhBQ,eAAiB,SAAAC,GACZ,EAAKzB,SAAS,CAACH,SAAU4B,IACzBV,QAAQC,IAAI,iB,wEAIb,OACI,yBAAK5B,UAAU,OACX,kBAAC,EAAD,CAAWH,IAAKyC,Y,GAfdC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.d0b0d800.chunk.js","sourcesContent":["import React from 'react'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\n\nexport default function LoginForm({id , app}) {\n\n    const fetch = require('node-fetch');\n    function submitLoginRequest() {\n\n        fetch(\"http://localhost:8082/login\"+ app.state.selectedProtocol, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username: app.state.username,\n                password: app.state.password\n            })\n        })\n            .then(resp=>resp.json())\n            .then(json=>console.log(json))\n    }\n\n    function submitGoogleLoginRequest() {\n\n        fetch(\"http://localhost:8082/google-login\")\n    }\n\n    const handlePassword = event => {\n        \n        app.setState({ password: event.target.value })\n\n    } \n\n    const handleUsername = event => {\n\n        app.setState({ username: event.target.value })\n    } \n\n    return (\n        <div className=\"col-12 form-input\" id={id}>\n\n            <InputGroup className=\"mb-3\">\n                <FormControl\n                    placeholder=\"username\"\n                    aria-label=\"Recipient's username\"\n                    aria-describedby=\"basic-addon2\"\n                    type=\"text\"\n                    value={app.state.username}\n                    onChange={handleUsername}\n                />\n                <FormControl\n                    placeholder=\"password\"\n                    aria-label=\"Recipient's password\"\n                    aria-describedby=\"basic-addon2\"\n                    type=\"password\"\n                    value={app.state.password}\n                    onChange={handlePassword}\n                />\n\n            </InputGroup>\n\n\n            <Button\n                variant=\"primary\"\n                onClick={submitLoginRequest}\n            >\n            {'Login'}\n            </Button>\n\n            <a href=\"http://localhost:8082/google-login\"> Login With Google </a>\n\t\t\n        </div>\n    )\n}\n\n","import React from 'react'\nimport LoginForm from \"./LoginForm\";\n\nconst UserLogin = ({app})=>\n    <div className=\"modal-dialog text-center\">\n        <div className=\"col-sm-8 main-section\">\n            <div className=\"modal-content\">\n                <div className=\"col-12 user-img\">\n                    <img src=\"logo.png\" alt={\"\"}/>\n                </div>\n                <div className=\"col-12 user-name\">\n                    <h1>User Login</h1>\n                </div>\n                <LoginForm id={\"login\"} app={app}/>\n                <div className=\"col-12 link-part\">\n                    <a href=\"/passwordForgotten\">Forgot Password?   </a>\n                    <h1></h1>\n                    <a href=\"/register\"> Register</a>\n                </div>\n            </div>\n        </div>\n    </div>\n\nexport default UserLogin\n","import React, { Component } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport AuthenticationProtocol from './AuthenticationProtocol'\nimport UserLogin from './UserLogin'\n\nimport './stylesheets/App.css';\n\nclass App extends Component {\n    state = { selectedProtocol: \"\", password:\"\", username:\"\"};\n\n    changePass = inputPass => { \n        this.setState({password: inputPass})\n        console.log(\"pass set\")\n    }\n    changeUsername = inputUsername => {\n         this.setState({username: inputUsername})\n         console.log(\"username set\")\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <UserLogin app={this}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}